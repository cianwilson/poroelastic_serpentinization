<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">short</string_value>
  </length>
  <owner>
    <string_value lines="1">oevans</string_value>
  </owner>
  <description>
    <string_value lines="1">Reactive poro-elastic problem for seafloor hydration with fluid-rich vertical crack. These runs include surface energy (E &gt; 0).</string_value>
  </description>
  <simulations>
    <simulation name="hydration">
      <input_file>
        <string_value lines="1" type="filename">seafloor_hydration_surface_energy.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <number_processes>
        <integer_value rank="0">1</integer_value>
      </number_processes>
      <parameter_sweep>
        <parameter name="reaction">
          <values>
            <string_value lines="1">serpentine</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

if reaction == "serpentine":
  # Stoichiometry
  nu_A = -0.84
  nu_f = -0.16
  nu_B = 1.

  #Densities
  rho_A = 3300.
  rho_f = 1000.
  rho_B = 2537.
elif reaction == 'magnesite':
  # Stoichiometry
  nu_A = -0.61
  nu_f = -0.36
  nu_B = 1.

  #Densities
  rho_A = 3300.
  rho_f = 900.
  rho_B = 2906.
else:
  print(" Reaction {} not recognized")
  assert(False)
  
#Reference phase fractions 
phi_ref = float(phi0)
phi_A_ref = 1. 


#Reaction rates -  defs consistent with paper
R_phi   = (1. + (nu_B*rho_A)/(nu_A*rho_B))
R_phi_A = -phi_ref/phi_A_ref
R_p     = -(1. + nu_f*rho_A/(nu_A*rho_f) + nu_B*rho_A/(nu_A*rho_B))
  
# and write to the tfml file
libspud.set_option("/io/output_base_name",reaction)
libspud.set_option("/system::SeafloorReactive/coefficient::R_phi/type::Constant/rank::Scalar/value::WholeMesh/constant",R_phi)
libspud.set_option("/system::SeafloorReactive/coefficient::R_phi_A/type::Constant/rank::Scalar/value::WholeMesh/constant",R_phi_A)
libspud.set_option("/system::SeafloorReactive/coefficient::R_p/type::Constant/rank::Scalar/value::WholeMesh/constant",R_p)

  
# print some stuff for fun
print("Reaction: {}".format(reaction))
print("    R_phi   = {}".format(R_phi))
print("    R_phi_A = {}".format(R_phi_A))
print("    R_p     = {}".format(R_p))</string_value>
            <single_build/>
          </update>
          <comment>choices for reactions are "serpentine" (ol + H20 -&gt; serpentine (+ brucite)
or "magnesite" (ol + C02 -&gt; Magnesite (+SIO2))</comment>
        </parameter>
        <parameter name="w">
          <values>
            <string_value lines="1">1.e-7</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::SeafloorReactive/coefficient::w/type::Constant/rank::Scalar/value::WholeMesh/constant",float(w))</string_value>
            <single_build/>
          </update>
          <comment>Crack width</comment>
        </parameter>
        <parameter name="Kcrack">
          <values>
            <string_value lines="1">1.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::SeafloorReactive/coefficient::Kcrack/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Kcrack))</string_value>
            <single_build/>
          </update>
          <comment>Crack permeability factor</comment>
        </parameter>
        <parameter name="Ke">
          <values>
            <string_value lines="1">1.0</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::SeafloorReactive/coefficient::BulkModulus/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Ke))</string_value>
            <single_build/>
          </update>
          <comment>Elastic bulk modulus</comment>
        </parameter>
        <parameter name="phi_crack">
          <values>
            <string_value lines="1">1.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::SeafloorReactive/coefficient::phi_crack/type::Constant/rank::Scalar/value::WholeMesh/constant",float(phi_crack))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="phi0">
          <values>
            <string_value lines="1">0.1</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::SeafloorReactive/coefficient::phi0/type::Constant/rank::Scalar/value::WholeMesh/constant",float(phi0))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="beta">
          <values>
            <string_value lines="1">1.e-12</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::SeafloorReactive/coefficient::FluidCompressibility/type::Constant/rank::Scalar/value::WholeMesh/constant",float(beta))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="R">
          <values>
            <string_value lines="1">1.e-3</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::SeafloorReactive/coefficient::R/type::Constant/rank::Scalar/value::WholeMesh/constant",float(R))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <required_input>
        <filenames name="Mesh">
          <string>
            <string_value lines="1" type="filename">../../mesh/fracture_mesh.xml</string_value>
          </string>
        </filenames>
      </required_input>
    </simulation>
  </simulations>
</harness_options>
